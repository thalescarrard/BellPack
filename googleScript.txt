function doGet(e) {
  const token = e.parameter.token || '';
  const AUTH_TOKEN = PropertiesService.getScriptProperties().getProperty('AUTH_TOKEN');
  if (!AUTH_TOKEN || token !== AUTH_TOKEN) {
    return ContentService.createTextOutput(
      JSON.stringify({ error: 'Unauthorized' })
    ).setMimeType(ContentService.MimeType.JSON);
  }

  const checkDuplicate = e.parameter.checkDuplicate === '1';
  const query = e.parameter.q;

  if (checkDuplicate) {
    const email = (e.parameter.email || '').trim().toLowerCase();
    const tracking = (e.parameter.tracking || '').trim().toLowerCase();

    if (!email || !tracking) {
      return ContentService.createTextOutput(
        JSON.stringify({ error: 'Missing email or tracking parameter' })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    const sheet = SpreadsheetApp.openById('1h6Sqe5eSUe5LimCunx5JktM8uytYEkWACRG1B8zALzs').getSheetByName('Log');
    if (!sheet) {
      return ContentService.createTextOutput(
        JSON.stringify({ error: 'Log sheet not found' })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const emailIndex = headers.indexOf('Email');
    const trackingIndex = headers.indexOf('Tracking');

    const isDuplicate = data.some((row, i) => {
      if (i === 0) return false; // Skip headers
      return String(row[emailIndex]).toLowerCase() === email &&
             String(row[trackingIndex]).toLowerCase() === tracking;
    });

    return ContentService.createTextOutput(
      JSON.stringify({ isDuplicate })
    ).setMimeType(ContentService.MimeType.JSON);
  }

  if (!query) {
    return ContentService.createTextOutput(
      JSON.stringify({ error: 'Missing query parameter q' })
    ).setMimeType(ContentService.MimeType.JSON);
  }

  const guestSheet = SpreadsheetApp.openById('18uGR1ZP7kcI1hUUkcx9JaKqAWdvkMqzKLWhMWFeHEX0').getSheetByName('Guests');
  if (!guestSheet) {
    return ContentService.createTextOutput(
      JSON.stringify({ error: 'Guests sheet not found' })
    ).setMimeType(ContentService.MimeType.JSON);
  }

  const data = guestSheet.getDataRange().getValues();
  const headers = data[0];
  const nameIndex = headers.indexOf('Name');
  const emailIndex = headers.indexOf('Email');
  const roomIndex = headers.indexOf('Room');

  const lowerQuery = query.toLowerCase();
  const guest = data.find((row, i) => {
    if (i === 0) return false;
    return String(row[nameIndex]).toLowerCase().includes(lowerQuery);
  });

  return ContentService.createTextOutput(
    JSON.stringify(guest ? {
      name: guest[nameIndex],
      email: guest[emailIndex],
      room: guest[roomIndex]
    } : { error: 'Guest not found' })
  ).setMimeType(ContentService.MimeType.JSON);
}

function doPost(e) {
  const token = e.parameter.token || '';
  const AUTH_TOKEN = PropertiesService.getScriptProperties().getProperty('AUTH_TOKEN');
  if (!AUTH_TOKEN || token !== AUTH_TOKEN) {
    return ContentService.createTextOutput(
      JSON.stringify({ error: 'Unauthorized' })
    ).setMimeType(ContentService.MimeType.JSON);
  }

  try {
    const data = JSON.parse(e.postData.contents || '{}');
    const ocrApiKey = PropertiesService.getScriptProperties().getProperty('OCR_API_KEY');

    if (data.imageBase64) {
      const ocrResponse = UrlFetchApp.fetch('https://api.ocr.space/parse/image', {
        method: 'post',
        contentType: 'application/x-www-form-urlencoded',
        payload: {
          apikey: ocrApiKey,
          base64Image: `data:image/jpeg;base64,${data.imageBase64}`,
          isOverlayRequired: false
        }
      });

      const result = JSON.parse(ocrResponse.getContentText());
      const text = result?.ParsedResults?.[0]?.ParsedText || '';
      return ContentService.createTextOutput(JSON.stringify({ text })).setMimeType(ContentService.MimeType.JSON);
    }

    const sheet = SpreadsheetApp.openById('1h6Sqe5eSUe5LimCunx5JktM8uytYEkWACRG1B8zALzs').getSheetByName('Log');
    if (!sheet) {
      return ContentService.createTextOutput(
        JSON.stringify({ error: 'Log sheet not found' })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    sheet.appendRow([
      new Date(),
      data.name || '',
      data.email || '',
      data.room || '',
      data.carrier || '',
      data.tracking || ''
    ]);

    return ContentService.createTextOutput(JSON.stringify({ status: 'success' })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({ error: error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}